[project]
name = "keiko-memoria-viva"
version = "0.1.0"
description = "Biologisch inspirierte Gedächtniskonzepte für Multi-Agent-Systeme"
readme = "README.md"
requires-python = ">=3.10"
keywords = [
    "memory-systems",
    "multi-agent",
    "neurobiological-concepts",
    "adaptive-memory",
    "machine-learning",
]
dependencies = [
    "numpy>=2.0.2",
    "pandas>=2.2.0",
    "matplotlib>=3.8.0",
    "mplcursors>=0.7",
    "notebook>=7.0.0",
    "jupyterlab>=4.0.0",
    "plotly>=5.18.0",
    "seaborn>=0.13.2",
    "ipywidgets>=8.1.7",
]

[build-system]
requires = ["hatchling>=1.27.0"]
build-backend = "hatchling.build"

[project.license]
text = "MIT"

[project.optional-dependencies]
dev = []

[project.urls]
Homepage = "https://github.com/Keiko-Evolutio/keiko-memoria-viva"
Repository = "https://github.com/Keiko-Evolutio/keiko-memoria-viva"
Issues = "https://github.com/Keiko-Evolutio/keiko-memoria-viva/issues"

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = "\\.pyi?$"
extend-exclude = "/(\n  # directories\n  \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | build\n  | dist\n)/\n"

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[tool.ruff.lint]
select = ["E", "W", "F", "I", "B", "C4", "UP"]
ignore = ["E501", "B008", "C901"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["adaptive_forgetting", "plastic_memory", "selective_memory_filtering"]
omit = ["*/tests/*", "*/__pycache__/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.hatch.build.targets.wheel]
packages = [
    "adaptive_forgetting",
    "plastic_memory",
    "selective_memory_filtering",
]
